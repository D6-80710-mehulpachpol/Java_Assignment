
//0. Exit
//1. Add Mango
//case 1 : boundary checking
//basket[counter++]=new Mango(nm,weight,color);
//break;
//2. Add Orange
//3. Add Apple
//NOTE : You will be adding a fresh fruit in the basket , in all of above options.
//4. Display names of all fruits in the basket.
//eg : for-each --- null checking --getName()
//5. Display name,color,weight , taste of all fresh fruits , in the basket.
//eg : for-each , null checking --toString , taste, isFresh : getter
//6. Display tastes of all stale(not fresh) fruits in the basket.
//7. Mark a fruit as stale
//i/p : index
//eg : setter : isFresh : false
//o/p : error message (in case of invalid index) or mark it stale
//8. Mark all sour fruits stale (optional)
//eg : for-each , taste --equals(String)



package p1;

import java.util.Scanner;

public class FruitBasket {
	
	
	
	public static int menu() {
		
		int option;
		System.out.println("Choose From The Menu : ");
		System.out.println("1. Add Mango");
		System.out.println("2. Add Orange");
		System.out.println("3. Add Apple");
		System.out.println("4. Display names of all fruits in the basket.");
		System.out.println("5. Display name,color,weight , taste of all fresh fruits , in the basket.");
		System.out.println("6. Mark a fruit as stale");
		System.out.println("7. Mark all sour fruits stale");
		System.out.println("8. Display tastes of all stale(not fresh) fruits in the basket.");
		System.out.println("0. EXIT");

		Scanner sc = new Scanner(System.in);
		option = sc.nextInt();
		return option;
	}


	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the number of Fruits to add : ");
		int size = sc.nextInt();
		Fruit[] fr =new Fruit[size];
		int counter = 0;
		
		
		
		
		int choice;
		while((choice = menu())!=0) {
			
			switch (choice) {
			case 1: {
				if(counter<size) {
					System.out.println("Enter Name : ");
					String nm = sc.next();
					
					System.out.println("Enter Color : ");
					String clr = sc.next();
					
					System.out.println("Enter Weight : ");
					double weight = sc.nextDouble();
					
					Mango m = new Mango(nm , weight , clr);
					
					fr[counter] = m;
					
					counter++;
				}
				
					
				break;
			}
			
			case 2: {
				
				if(counter<size) {
					System.out.println("Enter Name : ");
					String nm = sc.next();
					
					System.out.println("Enter Color : ");
					String clr = sc.next();
					
					System.out.println("Enter Weight : ");
					double weight = sc.nextDouble();
					Orange o = new Orange(nm , weight , clr);
					fr[counter] = o;
					
					counter++;
				}
				
				break;
					
			}
			case 3: {
				
				if(counter<size) {
					System.out.println("Enter Name : ");
					String nm = sc.next();
					
					System.out.println("Enter Color : ");
					String clr = sc.next();
					
					System.out.println("Enter Weight : ");
					double weight = sc.nextDouble();
					Apple a =  new Apple(nm , weight , clr);
					fr[counter] = a;
					
					counter++;
				}
				

				break;
				
			}
			case 4: {
				
				System.out.println("Displaying List of Fruits : ");
				for(Fruit ele : fr) {
					if(ele!=null) {
						System.out.println(ele.getName());
					}
				}
				
				break;
			}
			
			case 5: {
				
				System.out.println("Displaying All Details of Fruits : ");
				for(Fruit ele : fr) {
					if(ele!=null) {
						ele.toString();
						ele.taste();
					}
				}
				
				break;
					
			}
			case 6: {
				
				System.out.println("Enter the index to Change Condition : ");
				int index = sc.nextInt();
				if(fr[index]!=null) {
					fr[index].setFresh(false);
				}
				
				break;
				
			}
			case 7: {
				System.out.println("Marking All Sour Fruits as Stale : ");
				for(Fruit ele : fr) {
					if(ele!=null) {
						if(ele.taste() == "Sweet and Sour") {
							ele.setFresh(false);
						}						
					}
				}
				
				
				break;
			}
			case 8: {
				
				System.out.println("Displaying All Non Stale Fruits : ");
				for(Fruit ele : fr) {
					if(ele!=null) {
						if(ele.isFresh() == true) {
							ele.taste();
						}						
					}
				}
				
				break;
			}
			
			
			default:
				System.out.println("Enter Valid Input ");
			}
			
		}
		sc.close();

	}

}
